# -*- coding: utf-8 -*-
"""
/***************************************************************************
 StalpiAssist
                                 A QGIS plugin
 Helps in assisting for Enel
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-11-29
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Ionela
        email                : ioneladumitra@yahoo.ro
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from pathlib import Path

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsMessageLog

import os
import os.path

from .resources import *

from .func.helper_functions import HelperBase
from .func.models.tronson_jt import TronsonJTModel
from .func.models.bransament import BransamentModel
from .func.models.stalp import StalpJTModel
from .func.models.deschideri import DeschideriJTModel
from .func.models.tronson_aranjat import TronsonAranjatModel

from .func.parsers.firida import IgeaFiridaParser
from .func.parsers.bransament import IgeaBransamentParser
from .func.parsers.linie import IgeaLinieParser
from .func.parsers.tronson import IgeaTronsonParser

# from .func.parsers.deschideri import DeschideriParser
# from .func.parsers.stalp import StalpParser
# from .func.parsers.grup_masura import GrupMasuraParser





class StalpiAssist:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        self.helper = HelperBase()
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'StalpiAssist_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&StalpiAssist')
        
        self.layers = self.helper.get_layers()

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None


    @staticmethod
    def plugin_path(*args) -> Path:
        """ Return the path to the plugin root folder or file. """
        path = Path(__file__).resolve().parent
        for item in args:
            path = path.joinpath(item)
        return path


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('StalpiAssist', message)


    def add_action(
        self,
        name,
        text,
        callback=None,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
        icon_path=None,
        shortcut=None,):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.setEnabled(enabled_flag)

        if callback is not None:
            action.triggered.connect(callback)
            action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)
            
        if shortcut is not None:
            action.setShortcut(shortcut)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        self.toolbar = self.iface.addToolBar('StalpiAssist')
        self.toolbar.setObjectName('StalpiAssist')
        self.toolbar.setMovable(True)
        
        self.add_action(
            "Fisier Destinatie",
            text=self.tr(u'Fisier Destinatie'),
            callback=self.helper.set_base_dir,
            parent=self.iface.mainWindow(),
            icon_path= str(self.plugin_path('icons/folder.png'))
        )
        
        self.add_action(
            "001_Tronson_JT",
            text=self.tr(u'001_Tronson_JT'),
            callback=self.run_tronson_model,
            parent=self.iface.mainWindow(),
            icon_path= str(self.plugin_path('icons/1.png'))
        )
        
        self.add_action(
            "002_BRANS_FIRI_GR"
            text=self.tr(u'002_BRANS_FIRI_GR'),
            callback=self.run_brans_model,
            parent=self.iface.mainWindow(),
            icon_path= str(self.plugin_path('icons/2.png'))
        )
        
        self.add_action(
            "003_STALP_JT"
            text=self.tr(u'003_STALP_JT'),
            callback=self.run_stalp_model,
            parent=self.iface.mainWindow(),
            icon_path= str(self.plugin_path('icons/3.png'))
        )
        
        self.add_action(
            "003_TRONSOANE_DUBLE",
            text=self.tr(u'003_TRONSOANE_DUBLE'),
            callback=self.run_tronsoane_duble_model,
            parent=self.iface.mainWindow(),
            icon_path= str(self.plugin_path('icons/4.png'))
        )
        
        self.add_action(
            "004_DESCHIDERI_JT",
            text=self.tr(u'004_DESCHIDERI_JT'),
            callback=self.run_deschideri_model,
            parent=self.iface.mainWindow(),
            icon_path= str(self.plugin_path('icons/5.png'))
        )
        
        self.add_action(
            "Generare Excel + XML",
            text=self.tr(u'Generare Excel + XML'),
            callback=self.generate_excel_xml,
            parent=self.iface.mainWindow(),
            icon_path= str(self.plugin_path('icons/xml.png'))
        )
        
        self.add_action(
            "Generate Anexa",
            text=self.tr(u'Generate Anexa'),
            callback=self.generate_anexa,
            parent=self.iface.mainWindow(),
            icon_path= str(self.plugin_path('icons/anexa.png'))
        )
        
        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr(u'&Enel Assist'), action)
            self.toolbar.removeAction(action)
        del self.toolbar
        
        
    def run_tronson_model(self):
        """Run Tronson model."""
        algorithm = TronsonJTModel()
        params = {
            "linie_jt_introduse": self.layers["LINIE_JT"],
            "stalpi_desenati": self.layers["STALP_JT"],
            "tronson_desenat": self.layers["TRONSON_JT"],
            "TRONSON_XML_": os.path.join(self.base_dir, f"TRONSON_XML_.shp")
        }
        self.helper.run_algorithm(algorithm, params, self.context, self.feedback, "TRONSON_XML_")
        
        
    def run_brans_model(self):
        algorithm = BransamentModel()
        params = {
            "brans_firi_desenate": self.layers["BRANS_FIRI_GRPM_JT"],
            "fb_pe_c_les": self.layers["FB pe C LES"],
            "linie_jt_introduse": self.layers["LINIE_JT"],
            "BRANSAMENT_XML_": os.path.join(self.base_dir, f"BRANSAMENT_XML_.shp"),
            "GRUP_MASURA_XML_": os.path.join(self.base_dir, f"GRUP_MASURA_XML_.shp"),
            "FIRIDA_XML_": os.path.join(self.base_dir, f"FIRIDA_XML_.shp")
        }   
        self.helper.run_algorithm(algorithm, params, self.context, self.feedback, ["BRANSAMENT_XML_", "FIRIDA_XML_", "GRUP_MASURA_XML_"])
        
        
    def run_stalp_model(self):
        algorithm = StalpJTModel()
        params = {
            "poze_geotag": self.layers["poze"],
            "stalp_in_lucru": self.layers["STALP_JT"],
            "STALP_XML_": os.path.join(self.base_dir, f"STALP_XML_.shp")
        }
        self.helper.run_algorithm(algorithm, params, self.context, self.feedback, "STALP_XML_") 
    
    
    def run_deschideri_model(self):
        algorithm = DeschideriJTModel()
        params = {
            'stalpi_desenati': self.layers['STALP_JT'],
            'tronson_jt': self.layers['TRONSON_XML_'],
            'DESCHIDERI_XML_': os.path.join(self.base_dir, f"DESCHIDERI_XML_.shp"),
            'SCR_DWG': os.path.join(self.base_dir, f"SCR_DWG.shp"),
        }
        self.helper.run_algorithm(algorithm, params, self.context, self.feedback, ["DESCHIDERI_XML_", "SCR_DWG"])
        
        
    def run_tronsoane_duble_model(self):
        algorithm = TronsonAranjatModel()
        params = {
            'tronson_aranjat': self.layers['TRONSON_ARANJAT'],
            'TRONSON_predare_xml': os.path.join(self.base_dir, f"TRONSON_predare_xml.shp"),
        }
        self.helper.run_algorithm(algorithm, params, self.context, self.feedback, ["TRONSON_predare_xml"])


    def generate_excel_xml(self, base_dir):
        """
        Generates XML and XLSX files for the columns of given layers, skipping any column named 'fid'.
        Replaces blanks in column names with apostrophes.

        :param base_dir: Directory where the files will be saved.
        """
        if not os.path.exists(base_dir):
            os.makedirs(base_dir)
            
        # Map layer names to desired file names
        file_name_mapping = {
            "LINIE_JT": "linie_jt",
            "STALP_XML_": "stalp",
            "BRANSAMENT_XML_": "bransament",
            "GRUP_MASURA_XML_": "grup_masura",
            "FIRIDA_XML_": "firida",
            "DESCHIDERI_XML_": "deschidere",
            "TRONSON_predare_xml": "tronson_jt"
        }
        
        layers = [
            self.layers['LINIE_JT'],
            self.layers['STALP_XML_'],
            self.layers['BRANSAMENT_XML_'],
            self.layers['GRUP_MASURA_XML_'],
            self.layers['FIRIDA_XML_'],
            self.layers['DESCHIDERI_XML_'],
            self.layers['TRONSON_predare_xml']
        ]
        
        for layer in layers:
            layer_name = layer.name()
            safe_layer_name = file_name_mapping.get(layer_name, layer_name)  # Get mapped name or default to layer name
            
            # XML file generation
            xml_path = os.path.join(base_dir, f"{safe_layer_name}.xml")
            root = ET.Element("Layer")
            root.set("name", layer_name)
            
            for field in layer.fields():
                if field.name().lower() != "fid":  # Skip 'fid'
                    field_elem = ET.SubElement(root, "Field")
                    field_name = field.name().replace(" ", "'")  # Replace blanks with apostrophes
                    field_elem.set("name", field_name)
                    field_elem.set("type", field.typeName())
            
            tree = ET.ElementTree(root)
            tree.write(xml_path, encoding="utf-8-sig", xml_declaration=True)
            
            # XLSX file generation
            xlsx_path = os.path.join(base_dir, f"{safe_layer_name}.xlsx")
            workbook = xlsxwriter.Workbook(xlsx_path)
            worksheet = workbook.add_worksheet()
            
            # Write header row
            headers = [field.name().replace(" ", "'") for field in layer.fields() if field.name().lower() != "fid"]
            for col_idx, header in enumerate(headers):
                worksheet.write(0, col_idx, header)
            
            # Write rows
            for row_idx, feature in enumerate(layer.getFeatures(), start=1):
                for col_idx, field in enumerate(layer.fields()):
                    if field.name().lower() != "fid":  # Skip 'fid'
                        value = feature[field.name()]
                        worksheet.write(row_idx, col_idx, value)
            
            workbook.close()
            
            print(f"Generated files for layer '{layer_name}' as '{safe_layer_name}': XML and XLSX.")

    
    def generate_anexa(self):
        pass


