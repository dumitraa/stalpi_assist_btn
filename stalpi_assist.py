# -*- coding: utf-8 -*-
"""
/***************************************************************************
 StalpiAssist
                                 A QGIS plugin
 Helps in assisting for Enel
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-11-29
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Ionela
        email                : ioneladumitra@yahoo.ro
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from pathlib import Path

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication # type: ignore
from qgis.PyQt.QtGui import QIcon # type: ignore
from qgis.PyQt.QtWidgets import QAction # type: ignore
from qgis.core import QgsMessageLog, QgsProcessingFeedback, QgsProcessingContext, Qgis, QgsProject # type: ignore
from qgis.PyQt.QtWidgets import QFileDialog # type: ignore

import os
import os.path

from .resources import *

from .func.helper_functions import HelperBase, SHPProcessor
from .func.models.tronson_jt import TronsonJTModel
from .func.models.bransament import BransamentModel
from .func.models.stalp import StalpJTModel
from .func.models.deschideri import DeschideriJTModel
from .func.models.tronson_aranjat import TronsonAranjatModel

from .func.generate_xml import GenerateXMLDialog
from .func.generate_excel import GenerateExcelDialog


class StalpiAssist:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        self.helper = HelperBase()
        self.processor = None
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'StalpiAssist_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&StalpiAssist')
        
        self.layers = self.helper.get_layers()

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None


    @staticmethod
    def plugin_path(*args) -> Path:
        """ Return the path to the plugin root folder or file. """
        path = Path(__file__).resolve().parent
        for item in args:
            path = path.joinpath(item)
        return path


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('StalpiAssist', message)


    def add_action(
        self,
        name,
        text,
        callback=None,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
        icon_path=None,
        shortcut=None,):
        
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.setEnabled(enabled_flag)

        if callback is not None:
            action.triggered.connect(callback)
            action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)
            
        if shortcut is not None:
            action.setShortcut(shortcut)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):

        self.toolbar = self.iface.addToolBar('StalpiAssist')
        self.toolbar.setObjectName('StalpiAssist')
        self.toolbar.setMovable(True)
        
        # Adding actions with default enabled flag set to False except "Fisier Destinatie"
        self.fisier_destinatie_action = self.add_action(
            "Fisier Destinatie",
            text=self.tr(u'Fisier Destinatie'),
            callback=self.set_base_dir,
            parent=self.iface.mainWindow(),
            icon_path= str(self.plugin_path('icons/folder.png')),
            enabled_flag=True
        )
        
        self.actions_to_enable = [
            self.add_action(
                "001_Tronson_JT",
                text=self.tr(u'001_Tronson_JT'),
                callback=self.run_tronson_model,
                parent=self.iface.mainWindow(),
                icon_path= str(self.plugin_path('icons/1.png')),
                enabled_flag=False
            ),
            self.add_action(
                "002_BRANS_FIRI_GR",
                text=self.tr(u'002_BRANS_FIRI_GR'),
                callback=self.run_brans_model,
                parent=self.iface.mainWindow(),
                icon_path= str(self.plugin_path('icons/2.png')),
                enabled_flag=False
            ),
            self.add_action(
                "003_STALP_JT",
                text=self.tr(u'003_STALP_JT'),
                callback=self.run_stalp_model,
                parent=self.iface.mainWindow(),
                icon_path= str(self.plugin_path('icons/3.png')),
                enabled_flag=False
            ),
            self.add_action(
                "003_TRONSOANE_DUBLE",
                text=self.tr(u'003_TRONSOANE_DUBLE'),
                callback=self.run_tronsoane_duble_model,
                parent=self.iface.mainWindow(),
                icon_path= str(self.plugin_path('icons/4.png')),
                enabled_flag=False
            ),
            self.add_action(
                "004_DESCHIDERI_JT",
                text=self.tr(u'004_DESCHIDERI_JT'),
                callback=self.run_deschideri_model,
                parent=self.iface.mainWindow(),
                icon_path= str(self.plugin_path('icons/5.png')),
                enabled_flag=False
            ),
            self.add_action(
                "Generare Excel + XML",
                text=self.tr(u'Generare Excel + XML'),
                callback=self.generate_xml,
                parent=self.iface.mainWindow(),
                icon_path= str(self.plugin_path('icons/xml.png')),
                enabled_flag=False
            ),
            self.add_action(
                "Generate Anexa",
                text=self.tr(u'Generate Anexa'),
                callback=self.generate_anexa,
                parent=self.iface.mainWindow(),
                icon_path= str(self.plugin_path('icons/anexa.png')),
                enabled_flag=False
            )
        ]
        
        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr(u'&Enel Assist'), action)
            self.toolbar.removeAction(action)
        del self.toolbar
        
    
    def set_base_dir(self):
        """Set base directory and update icons."""
        base_dir = QFileDialog.getExistingDirectory(None, "Select Base Directory", "")
        if base_dir:
            self.base_dir = base_dir  # Set the base directory here directly
            QgsMessageLog.logMessage(f"Base directory set to: {self.base_dir}", "StalpiAssist", level=Qgis.Info)
            # Update the icon for Fisier Destinatie to complete.png
            self.fisier_destinatie_action.setIcon(QIcon(str(self.plugin_path('icons/complete.png'))))
            # Enable all other actions
            for action in self.actions_to_enable:
                action.setEnabled(True)
                
            self.feedback = QgsProcessingFeedback()
            self.context = QgsProcessingContext()
            self.context.setProject(QgsProject.instance())
        
    def run_tronson_model(self):
        """Run Tronson model."""
        algorithm = TronsonJTModel()
        params = {
            "linie_jt_introduse": "LINIE_JT",
            "stalpi_desenati": "STALP_JT",
            "tronson_desenat": "TRONSON_JT",
            "TRONSON_XML_": os.path.join(self.base_dir, f"TRONSON_XML_.shp")
        }
        self.helper.run_algorithm(algorithm, params, self.context, self.feedback, "TRONSON_XML_")
        
        
    def run_brans_model(self):
        algorithm = BransamentModel()
        params = {
            "brans_firi_desenate": "BRANS_FIRI_GRPM_JT",
            "fb_pe_c_les": "FB pe C LES",
            "linie_jt_introduse": "LINIE_JT",
            "BRANSAMENT_XML_": os.path.join(self.base_dir, f"BRANSAMENT_XML_.shp"),
            "GRUP_MASURA_XML_": os.path.join(self.base_dir, f"GRUP_MASURA_XML_.shp"),
            "FIRIDA_XML_": os.path.join(self.base_dir, f"FIRIDA_XML_.shp")
        }   
        self.helper.run_algorithm(algorithm, params, self.context, self.feedback, ["BRANSAMENT_XML_", "FIRIDA_XML_", "GRUP_MASURA_XML_"])
        
        
    def run_stalp_model(self):
        algorithm = StalpJTModel()
        params = {
            "poze_geotag": "poze",
            "stalp_in_lucru": "STALP_JT",
            "STALP_XML_": os.path.join(self.base_dir, f"STALP_XML_.shp")
        }
        self.helper.run_algorithm(algorithm, params, self.context, self.feedback, "STALP_XML_") 
    
    
    def run_deschideri_model(self):
        algorithm = DeschideriJTModel()
        params = {
            'stalpi_desenati': 'STALP_JT',
            'tronson_jt': 'TRONSON_XML_',
            'DESCHIDERI_XML_': os.path.join(self.base_dir, f"DESCHIDERI_XML_.shp"),
            'SCR_DWG': os.path.join(self.base_dir, f"SCR_DWG.shp"),
        }
        self.helper.run_algorithm(algorithm, params, self.context, self.feedback, ["DESCHIDERI_XML_", "SCR_DWG"])
        
        
    def run_tronsoane_duble_model(self):
        algorithm = TronsonAranjatModel()
        params = {
            'tronson_aranjat': 'TRONSON_ARANJAT',
            'TRONSON_predare_xml': os.path.join(self.base_dir, f"TRONSON_predare_xml.shp"),
        }
        self.helper.run_algorithm(algorithm, params, self.context, self.feedback, ["TRONSON_predare_xml"])

    def generate_xml(self):
        self.process_layers(self.layers)
        dialog = GenerateXMLDialog(self.base_dir)  # Create an instance of your dialog
        dialog.exec_()  # Properly call exec_ on the instance
        
    def generate_anexa(self):
        self.process_layers(self.layers)
        dialog = GenerateExcelDialog(self.base_dir)  # Create an instance of your dialog
        dialog.exec_()  # Properly call exec_ on the instance
        
        
    def process_layers(self, layers):
        if not self.processor:
            try:
                self.processor = SHPProcessor(layers)
            except Exception as e:
                return
        
        try:
            current_layers = self.helper.get_layers()
        except Exception as e:
            return
        
        if current_layers != layers:
            self.processor = None
            
            try:
                self.processor = SHPProcessor(current_layers)
            except Exception as e:
                return
        else:
            QgsMessageLog.logMessage("No changes in layers. Processor remains unchanged.", "StalpiAssist", level=Qgis.Info)

